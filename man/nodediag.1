.TH nodediag 1 "2011-10-14" "nodediag-1.2" "nodediag"
.SH NAME
nodediag \- perform node diagnostics
.SH SYNOPSIS
.B nodediag
.I "[OPTIONS]"
.I "[test [test...]]"
.SH DESCRIPTION
.B nodediag
runs diagnostic test scripts from /etc/nodediag.d.
If any fail, \fBnodediag\fR exits with a nonzero exit status.
.SH OPTIONS
.TP
\fI-l\fR, \fI--list\fR
List available tests with descriptions, if available.
.TP
\fI-f\fR, \fI--firstfail\fR
Exit on first test failure.
.TP
\fI-q\fR, \fI--quiet\fR
Show no output.
.TP
\fI-v\fR, \fI--verbose\fR
Include raw test output.
.TP
\fI-p\fR, \fI--plain\fR
Disable the pretty terminal colors.
This option is automatically switched on if stdout is not a tty.
.TP
\fI-c\fR, \fI--config\fR
Generate a prototype /etc/sysconfig/nodediag file on stdout.
.TP
\fI-s\fR, \fI--sanity\fR
Only run quick sanity tests.
.TP
\fI-F\fR, \fI--forever\fR
Repeat test loop until interrupted.
.TP
\fI-d\fR, \fI--testdir DIR\fR
Use test directory other than /etc/nodediag.d.
.TP
\fI-j\fR, \fI--jobs N\fR
Set the number of tests to run in parallel (default 4).
.SH TESTS
Some tests are supplied with \fBnodediag\fR, and are
configured by editing varible settings in /etc/sysconfig/nodediag.
Tests can also be supplied by other packages.
For a list of installed tests, run \fInodediag -l\fR.
.LP
\fBnodediag\fR tests are standalone programs that format their output
according to the TAP (Test Anything Protocol) standard described at
http://testanything.org.  In addition, \fBnodediag\fR tests should
handle the following command line options:
.TP
\fI-d\fR
Produce a one-line description of the test's purpose.
.TP
\fI-c\fR
Produce default output for the /etc/sysconfig/nodediag file for this test.
.TP
\fI-s\fR
Run only a sanity (quick) version of the test.
.LP
Convenience functions in /etc/nodediag.d/functions can be used if desired.
A simple test utilizing these functions might look like this:
.IP
.nf
#!/bin/bash

declare -r description="Check crash dump count"

source /etc/nodediag.d/functions-tap || exit 1

diagconfig () {
  echo "DIAG_DUMPS_MAX=1"
}
diag_handle_args "$@"
test -n "$DIAG_DUMPS_MAX" || diag_plan_skip "not configured"
test -d /var/dumps || diag_plan_skip "/var/dumps is missing"
diag_plan 1

diag_msg "counting crash dumps"
shopt -s nullglob; i=$(echo /var/dumps/*|wc -w); shopt -u nullglob
if test $i -gt $DIAG_DUMPS_MAX; then
  diag_fail "$i dumps found, max is $DIAG_DUMPS_MAX"
else
  diag_ok "$i dumps found"
fi
exit 0
.fi
.LP
Alternatively, tests can use the many TAP resources available to generate
TAP output.  See http://testanything.org/wiki/index.php/TAP_Producers.
.LP
Because the tests follow the TAP standard, they can be run under
the perl \fBprove\fR command, e.g.
.IP
.nf
prove /etc/nodediag.d
prove --formatter TAP::Formatter::Nodediag /etc/nodediag.d
.fi
.LP
.SH FILES
/etc/nodediag.d
.br
/etc/sysconfig/nodediag
.br
/etc/sysconfig/nodediag.d/*
