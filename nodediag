#!/usr/bin/env perl
##############################################################################
# Copyright (c) 2011, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
# Written by Jim Garlick <garlick@llnl.gov>.
# LLNL-CODE-461827
# All rights reserved.
# 
# This file is part of nodediag.
# For details, see http://code.google.com/p/nodediag.
# Please also read the files DISCLAIMER and COPYING supplied with nodediag.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (as published by the
# Free Software Foundation) version 2, dated June 1991.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# terms and conditions of the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##############################################################################

use strict;
use lib './lib'; # for test

use File::Basename;
use Getopt::Long qw(:config no_ignore_case bundling);
use TAP::Harness;
use TAP::Formatter::Nodediag;

my $prog = basename($0);

my $usage = <<EOF;
Usage: $prog [OPTIONS] [test [test]...]

   -f, --firstfail      Exit on first failure
   -l, --list           List diags with descriptions
   -q, --quiet          Show no output, result is exit code
   -v, --verbose        Include raw test output
   -x, --failonly       Show output only from failed tests
   -p, --plain          Don't use pretty colors in output
   -c, --config         Generate prototype sysconfig file on stdout
   -s, --sanity         Only run quick sanity tests
   -F, --forever        Repeat tests until interrupted
   -d, --testdir        Use test directory other than /etc/nodediag.d
   -j, --jobs N         Number of tests to run in parallel (default 4)
   -h, --help           Display usage message
EOF

my %conf = ();

parse_cmdline ();

# Determine what tests to run
my @tests = get_tests ();

# Handle -l option
if ($conf{list}) {
    foreach (@tests) { system ($_, "-d"); }
    exit (0);
}
# Handle -c option
if ($conf{config}) {
    foreach (@tests) { system ($_, "-c"); }
    exit (0);
}

# execute tests using the TAP framework
my $rc;
do {
    $rc = run_tests (@tests);
} while ($conf{forever});

exit $rc;

sub get_tests
{
    my @files;

    if (@{$conf{tests}}) {
        foreach (@{$conf{tests}}) {
            log_fatal ("$_.t could not be found in $conf{testdir}\n")
                unless -r "$conf{testdir}/$_" . ".t";
            push @files, $_ . ".t";
        }
        @files = map "$conf{testdir}/$_", @files;
    } else {
        @files = glob "$conf{testdir}/*.t";
    }
    return @files;
}

sub run_tests
{
    my $formatter = TAP::Formatter::Nodediag->new (
        { color => (($conf{plain} || ! -t STDOUT) ? 0 : 1) },
    );
    my $verbosity;
    my $flags = 0;

    if ($conf{failonly}) {
        $verbosity = -1;    # show failed results only
    } elsif ($conf{quiet}) {
        $verbosity = -2;    # suppress everything
    } else {
        $verbosity = 0;     # show indiv. test results
    }
    # N.B. see comment in TAP::Formatter::Nodediag
    $verbosity += 0x10 if $conf{verbose};
    $verbosity += 0x20 if $conf{firstfail};
    $formatter->verbosity($verbosity);
        
    my $harness = TAP::Harness->new(
        { formatter => $formatter },
        { test_args => ['-s'] },
    );

    $harness->merge(1);           # combine stdout/stderr of tests
    $harness->jobs($conf{jobs});

    my @test_args = ();
    push @test_args, ('-s') if $conf{sanity};
    $harness->test_args(\@test_args);
    my $aggregator = $harness->runtests( @_ );
    return $aggregator->has_errors;
}

sub usage
{
    print STDERR "$usage";
    exit 0;
}

sub parse_cmdline
{
    my $help = 0;

    $conf{firstfail} = 0;
    $conf{list} = 0;
    $conf{quiet} = 0;
    $conf{verbose} = 0;
    $conf{failonly} = 0;
    $conf{plain} = 0;
    $conf{config} = 0;
    $conf{sanity} = 0;
    $conf{forever} = 0;
    $conf{testdir} = "/etc/nodediag.d";
    $conf{jobs} = 4;

    my $rc = GetOptions (
        "help|h!"         => \$help,
        "firstfail|f!"    => \$conf{firstfail},
        "list|l!"         => \$conf{list},
        "quiet|q!"        => \$conf{quiet},
        "verbose|v!"      => \$conf{verbose},
        "failonly|x!"     => \$conf{failonly},
        "plain|p!"        => \$conf{plain},
        "config|c!"       => \$conf{config},
        "sanity|s!"       => \$conf{sanity},
        "forever|F!"      => \$conf{forever},
        "testdir|d=s"     => \$conf{testdir},
        "jobs|j=i"        => \$conf{jobs},
    );

    log_fatal ("use only one of -v or -q\n") if $conf{quiet} && $conf{verbose};
    usage() if $help || !$rc;

    $ENV{NODEDIAGDIR} = $conf{testdir};

    @{$conf{tests}} = @ARGV;
}

sub log_msg     { print STDERR "$prog: ", @_; }
sub log_error   { log_msg ("Error: ", @_) }
sub log_fatal   { log_msg ("Fatal: ", @_); exit 1; }

#  vi: ts=4 sw=4 expandtab
